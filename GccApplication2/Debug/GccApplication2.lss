
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a85  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076c  00000000  00000000  00001075  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000514  00000000  00000000  000017e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000340  00000000  00000000  000022f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002639  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 18 02 	call	0x430	; 0x430 <main>
  88:	0c 94 44 02 	jmp	0x488	; 0x488 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Transmit>:

void RestartValue(void)
{
	length = 0;
	Flag = 0;
	triggerState = 0;	
  90:	e0 ec       	ldi	r30, 0xC0	; 192
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	95 ff       	sbrs	r25, 5
  98:	fd cf       	rjmp	.-6      	; 0x94 <USART_Transmit+0x4>
  9a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  9e:	08 95       	ret

000000a0 <USART_Init>:
  a0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a8:	e0 ec       	ldi	r30, 0xC0	; 192
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8d 7f       	andi	r24, 0xFD	; 253
  b0:	80 83       	st	Z, r24
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  be:	08 95       	ret

000000c0 <Start>:
  c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  c8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Flag>
  cc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <triggerState>
  d0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  d4:	81 e2       	ldi	r24, 0x21	; 33
  d6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <SendTrigger>:
void SendTrigger (void)
{
	//USART_Transmit('T');
	//USART_Transmit('\n');
	/* Set time 10 us */
	TCNT1 = 65516;
  de:	8c ee       	ldi	r24, 0xEC	; 236
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	/* Set prescaler 8 */
	TCCR1B = 0x02;
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	/* Set portB is output */
	DDRB = 0x02;
  f0:	84 b9       	out	0x04, r24	; 4
	/* Set trigger high */
	PORTB = 0x02;
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	08 95       	ret

000000f6 <DetectRising>:
void DetectRising (void) 
{
	// USART_Transmit('R');
	// USART_Transmit('\n');
	/* Set time = */
	TCNT1 = 0;
  f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	/* Set normal mode */
	// TCCR1A = 0x00;
	/* Set prescaler 1024 and set rising edge detect */
	TCCR1B = 0x45;
  fe:	85 e4       	ldi	r24, 0x45	; 69
 100:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 104:	08 95       	ret

00000106 <DetectFalling>:
void DetectFalling(void)
{
	//USART_Transmit('F');
	//USART_Transmit('\n');
	/* Set time = */
	TCNT1 = 0;
 106:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 10a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	/* Set normal mode */
	//TCCR1A = 0x00;
	/* Set prescaler 1024 and set falling edge detect */
	TCCR1B = 0x05;
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 114:	08 95       	ret

00000116 <SendAllNumber>:
	/* Start interrupt */
	//sei();
}

void SendAllNumber(volatile uint16_t number)
{
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	2c 97       	sbiw	r28, 0x0c	; 12
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
 132:	9c 87       	std	Y+12, r25	; 0x0c
 134:	8b 87       	std	Y+11, r24	; 0x0b
 136:	ce 01       	movw	r24, r28
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	7c 01       	movw	r14, r24
 13c:	8e 01       	movw	r16, r28
 13e:	05 5f       	subi	r16, 0xF5	; 245
 140:	1f 4f       	sbci	r17, 0xFF	; 255
 142:	fc 01       	movw	r30, r24
	int n = 5; //log10(number) + 1;
	int i = 0;
	int data[n];
	for (i = 0; i < n; i++, number /= 10)
	{
		data[i] = number % 10;
 144:	4b 85       	ldd	r20, Y+11	; 0x0b
 146:	5c 85       	ldd	r21, Y+12	; 0x0c
 148:	9a 01       	movw	r18, r20
 14a:	ad ec       	ldi	r26, 0xCD	; 205
 14c:	bc ec       	ldi	r27, 0xCC	; 204
 14e:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 152:	96 95       	lsr	r25
 154:	87 95       	ror	r24
 156:	96 95       	lsr	r25
 158:	87 95       	ror	r24
 15a:	96 95       	lsr	r25
 15c:	87 95       	ror	r24
 15e:	9c 01       	movw	r18, r24
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	82 0f       	add	r24, r18
 172:	93 1f       	adc	r25, r19
 174:	48 1b       	sub	r20, r24
 176:	59 0b       	sbc	r21, r25
 178:	41 93       	st	Z+, r20
 17a:	51 93       	st	Z+, r21
void SendAllNumber(volatile uint16_t number)
{
	int n = 5; //log10(number) + 1;
	int i = 0;
	int data[n];
	for (i = 0; i < n; i++, number /= 10)
 17c:	2b 85       	ldd	r18, Y+11	; 0x0b
 17e:	3c 85       	ldd	r19, Y+12	; 0x0c
 180:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	9c 87       	std	Y+12, r25	; 0x0c
 192:	8b 87       	std	Y+11, r24	; 0x0b
 194:	e0 17       	cp	r30, r16
 196:	f1 07       	cpc	r31, r17
 198:	a9 f6       	brne	.-86     	; 0x144 <SendAllNumber+0x2e>
 19a:	02 50       	subi	r16, 0x02	; 2
 19c:	11 09       	sbc	r17, r1
	{
		data[i] = number % 10;
	}
	for (i = n-1; i >= 0; i--)
	{
		USART_Transmit(data[i] + '0');
 19e:	f8 01       	movw	r30, r16
 1a0:	80 81       	ld	r24, Z
 1a2:	80 5d       	subi	r24, 0xD0	; 208
 1a4:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
	int data[n];
	for (i = 0; i < n; i++, number /= 10)
	{
		data[i] = number % 10;
	}
	for (i = n-1; i >= 0; i--)
 1a8:	0e 15       	cp	r16, r14
 1aa:	1f 05       	cpc	r17, r15
 1ac:	b1 f7       	brne	.-20     	; 0x19a <SendAllNumber+0x84>
	{
		USART_Transmit(data[i] + '0');
	}
	USART_Transmit('\n');
 1ae:	8a e0       	ldi	r24, 0x0A	; 10
 1b0:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
}
 1b4:	2c 96       	adiw	r28, 0x0c	; 12
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	ef 90       	pop	r14
 1cc:	08 95       	ret

000001ce <SendValue>:

void SendValue(volatile uint16_t number)
{
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <SendValue+0x6>
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
 1d8:	9a 83       	std	Y+2, r25	; 0x02
 1da:	89 83       	std	Y+1, r24	; 0x01
	// USART_Transmit('V');
	// USART_Transmit(':');
	/* Set normal mode */
	// TCCR1A = 0x00;
	/* Set no clock and set falling edge detect */
	TCCR1B = 0x00;
 1dc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	/* no interrupt */
	TIMSK1 = 0x00;
 1e0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	SendAllNumber(number);
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	9a 81       	ldd	r25, Y+2	; 0x02
 1e8:	0e 94 8b 00 	call	0x116	; 0x116 <SendAllNumber>
}
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <__vector_10>:

ISR(TIMER1_CAPT_vect) 
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	if (Flag == 1)
 218:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Flag>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	31 f4       	brne	.+12     	; 0x22c <__vector_10+0x36>
	{
		/*USART_Transmit(':');
		USART_Transmit('1');
		USART_Transmit('\n');*/
		DetectFalling();
 220:	0e 94 83 00 	call	0x106	; 0x106 <DetectFalling>
		Flag = 2;
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Flag>
 22a:	aa c0       	rjmp	.+340    	; 0x380 <__vector_10+0x18a>
	}
	else if (Flag == 2)
 22c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Flag>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	09 f0       	breq	.+2      	; 0x236 <__vector_10+0x40>
 234:	8a c0       	rjmp	.+276    	; 0x34a <__vector_10+0x154>
	{
		length = ICR1;
 236:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 23a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 23e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 242:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if (length < 64)
 246:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 24a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 24e:	80 34       	cpi	r24, 0x40	; 64
 250:	91 05       	cpc	r25, r1
 252:	88 f4       	brcc	.+34     	; 0x276 <__vector_10+0x80>
		{
			length = length * 1024 / 16 / 58;
 254:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 258:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 25c:	98 2f       	mov	r25, r24
 25e:	99 0f       	add	r25, r25
 260:	99 0f       	add	r25, r25
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	60 ea       	ldi	r22, 0xA0	; 160
 266:	73 e0       	ldi	r23, 0x03	; 3
 268:	0e 94 21 02 	call	0x442	; 0x442 <__udivmodhi4>
 26c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 270:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 274:	4e c0       	rjmp	.+156    	; 0x312 <__vector_10+0x11c>
		} 
		else if (length < 1024)
 276:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 27a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 27e:	81 15       	cp	r24, r1
 280:	94 40       	sbci	r25, 0x04	; 4
 282:	e8 f4       	brcc	.+58     	; 0x2be <__vector_10+0xc8>
		{
			length = length / 16 * 1024 / 58;
 284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 288:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 28c:	92 95       	swap	r25
 28e:	82 95       	swap	r24
 290:	8f 70       	andi	r24, 0x0F	; 15
 292:	89 27       	eor	r24, r25
 294:	9f 70       	andi	r25, 0x0F	; 15
 296:	89 27       	eor	r24, r25
 298:	38 2f       	mov	r19, r24
 29a:	33 0f       	add	r19, r19
 29c:	33 0f       	add	r19, r19
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	af e9       	ldi	r26, 0x9F	; 159
 2a2:	b6 e4       	ldi	r27, 0x46	; 70
 2a4:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 2a8:	92 95       	swap	r25
 2aa:	82 95       	swap	r24
 2ac:	8f 70       	andi	r24, 0x0F	; 15
 2ae:	89 27       	eor	r24, r25
 2b0:	9f 70       	andi	r25, 0x0F	; 15
 2b2:	89 27       	eor	r24, r25
 2b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2bc:	2a c0       	rjmp	.+84     	; 0x312 <__vector_10+0x11c>
		}
		else if (length < 3712)
 2be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2c6:	80 38       	cpi	r24, 0x80	; 128
 2c8:	9e 40       	sbci	r25, 0x0E	; 14
 2ca:	98 f4       	brcc	.+38     	; 0x2f2 <__vector_10+0xfc>
		{
			length = length / 58 * 1024 / 16;
 2cc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 2d0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 2d4:	af e9       	ldi	r26, 0x9F	; 159
 2d6:	b6 e4       	ldi	r27, 0x46	; 70
 2d8:	0e 94 35 02 	call	0x46a	; 0x46a <__umulhisi3>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	80 7c       	andi	r24, 0xC0	; 192
 2e6:	9f 70       	andi	r25, 0x0F	; 15
 2e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2f0:	10 c0       	rjmp	.+32     	; 0x312 <__vector_10+0x11c>
		} 
		else 
		{ 
			length = length / 16 / 58 * 1024;
 2f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2fa:	60 ea       	ldi	r22, 0xA0	; 160
 2fc:	73 e0       	ldi	r23, 0x03	; 3
 2fe:	0e 94 21 02 	call	0x442	; 0x442 <__udivmodhi4>
 302:	36 2f       	mov	r19, r22
 304:	33 0f       	add	r19, r19
 306:	33 0f       	add	r19, r19
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 30e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
		}
		length = ICR1; //ICR1 * 1024 / 16 / 58;
 312:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 316:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 31a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 31e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		/*USART_Transmit(':');
		USART_Transmit('2');
		USART_Transmit('\n');*/
		SendValue(length);
 322:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 326:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 32a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SendValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	99 e6       	ldi	r25, 0x69	; 105
 332:	28 e1       	ldi	r18, 0x18	; 24
 334:	81 50       	subi	r24, 0x01	; 1
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	20 40       	sbci	r18, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <__vector_10+0x13e>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <__vector_10+0x148>
 33e:	00 00       	nop
		_delay_ms(500);
		Start();
 340:	0e 94 60 00 	call	0xc0	; 0xc0 <Start>
		SendTrigger();
 344:	0e 94 6f 00 	call	0xde	; 0xde <SendTrigger>
 348:	1b c0       	rjmp	.+54     	; 0x380 <__vector_10+0x18a>
	} 
	else 
	{
		USART_Transmit('C');
 34a:	83 e4       	ldi	r24, 0x43	; 67
 34c:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit('A');
 350:	81 e4       	ldi	r24, 0x41	; 65
 352:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit('P');
 356:	80 e5       	ldi	r24, 0x50	; 80
 358:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit('T');
 35c:	84 e5       	ldi	r24, 0x54	; 84
 35e:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit('>');
 362:	8e e3       	ldi	r24, 0x3E	; 62
 364:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit(Flag + '0');
 368:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Flag>
 36c:	80 5d       	subi	r24, 0xD0	; 208
 36e:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit('\n');
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		Start();
 378:	0e 94 60 00 	call	0xc0	; 0xc0 <Start>
		SendTrigger();
 37c:	0e 94 6f 00 	call	0xde	; 0xde <SendTrigger>
	}
}
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	7f 91       	pop	r23
 38e:	6f 91       	pop	r22
 390:	5f 91       	pop	r21
 392:	4f 91       	pop	r20
 394:	3f 91       	pop	r19
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_13>:

ISR(TIMER1_OVF_vect) 
{
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	cf 93       	push	r28
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
	/*USART_Transmit('O');
	USART_Transmit('V');
	USART_Transmit('F');*/
	if (Flag == 0) 
 3c6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Flag>
 3ca:	81 11       	cpse	r24, r1
 3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <__vector_13+0x3e>
	{
		/*USART_Transmit(':');
		USART_Transmit('0');
		USART_Transmit('\n');*/
		PORTB = 0x00;
 3ce:	15 b8       	out	0x05, r1	; 5
		triggerState = 1;
 3d0:	c1 e0       	ldi	r28, 0x01	; 1
 3d2:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <triggerState>
		DetectRising();
 3d6:	0e 94 7b 00 	call	0xf6	; 0xf6 <DetectRising>
		Flag = 1;
 3da:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <Flag>
 3de:	16 c0       	rjmp	.+44     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	} 
	else 
	{
		USART_Transmit('O');
 3e0:	8f e4       	ldi	r24, 0x4F	; 79
 3e2:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit('V');
 3e6:	86 e5       	ldi	r24, 0x56	; 86
 3e8:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit('F');
 3ec:	86 e4       	ldi	r24, 0x46	; 70
 3ee:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit('>');
 3f2:	8e e3       	ldi	r24, 0x3E	; 62
 3f4:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit('X');
 3f8:	88 e5       	ldi	r24, 0x58	; 88
 3fa:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		USART_Transmit('\n');
 3fe:	8a e0       	ldi	r24, 0x0A	; 10
 400:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
		Start();
 404:	0e 94 60 00 	call	0xc0	; 0xc0 <Start>
		SendTrigger();
 408:	0e 94 6f 00 	call	0xde	; 0xde <SendTrigger>
	}
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	cf 91       	pop	r28
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <main>:

int main(void)
{	
	// DelayRestart();
	Start();
 430:	0e 94 60 00 	call	0xc0	; 0xc0 <Start>
	USART_Init(MYUBRR);
 434:	87 e6       	ldi	r24, 0x67	; 103
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Init>
	SendTrigger();
 43c:	0e 94 6f 00 	call	0xde	; 0xde <SendTrigger>
 440:	ff cf       	rjmp	.-2      	; 0x440 <main+0x10>

00000442 <__udivmodhi4>:
 442:	aa 1b       	sub	r26, r26
 444:	bb 1b       	sub	r27, r27
 446:	51 e1       	ldi	r21, 0x11	; 17
 448:	07 c0       	rjmp	.+14     	; 0x458 <__udivmodhi4_ep>

0000044a <__udivmodhi4_loop>:
 44a:	aa 1f       	adc	r26, r26
 44c:	bb 1f       	adc	r27, r27
 44e:	a6 17       	cp	r26, r22
 450:	b7 07       	cpc	r27, r23
 452:	10 f0       	brcs	.+4      	; 0x458 <__udivmodhi4_ep>
 454:	a6 1b       	sub	r26, r22
 456:	b7 0b       	sbc	r27, r23

00000458 <__udivmodhi4_ep>:
 458:	88 1f       	adc	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	5a 95       	dec	r21
 45e:	a9 f7       	brne	.-22     	; 0x44a <__udivmodhi4_loop>
 460:	80 95       	com	r24
 462:	90 95       	com	r25
 464:	bc 01       	movw	r22, r24
 466:	cd 01       	movw	r24, r26
 468:	08 95       	ret

0000046a <__umulhisi3>:
 46a:	a2 9f       	mul	r26, r18
 46c:	b0 01       	movw	r22, r0
 46e:	b3 9f       	mul	r27, r19
 470:	c0 01       	movw	r24, r0
 472:	a3 9f       	mul	r26, r19
 474:	70 0d       	add	r23, r0
 476:	81 1d       	adc	r24, r1
 478:	11 24       	eor	r1, r1
 47a:	91 1d       	adc	r25, r1
 47c:	b2 9f       	mul	r27, r18
 47e:	70 0d       	add	r23, r0
 480:	81 1d       	adc	r24, r1
 482:	11 24       	eor	r1, r1
 484:	91 1d       	adc	r25, r1
 486:	08 95       	ret

00000488 <_exit>:
 488:	f8 94       	cli

0000048a <__stop_program>:
 48a:	ff cf       	rjmp	.-2      	; 0x48a <__stop_program>
